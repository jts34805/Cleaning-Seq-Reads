A2 = A
##Creates duplicate data set to manipulate

A2 = data.frame(pos = factor(paste(A2[,1], A2[,2] - 9*(A2[,3] < 0), sep = '_')), orientation = sign(A2[,3]))
##pastes together the Chromosome and position categories, and then creates a new column that shows the direction for each read (either 1 or -1)

doubles = data.frame(fwd = table(A2[A2[,2]==1,1]), rev = table(A2[A2[,2]==-1,1]))
#Takes A2 and separates the 2 columns into four columns. instead of all forward and reverse reads in the two columns, there is now a a forward frequency and reverse frequency. allows these to be coerced as the same length because those that dont appear as a reverse read will have a frequency of 0

rownames(doubles) = doubles[,1]
#Changes row names to be the pasted chromosome and position columns

doubles = doubles[,c(2,4)]
#removes the pasted columns now that their information is stored in the rownames

colnames(doubles) = c('FwdDetections','RevDetections') 
#Changes the column names to above

use = which(rowSums(doubles[names(table(A2[,1])[order(-table(A2[,1]))]),] > 0) == 2)
#Needed for line below to run, not sure why

Fig1e = ggplot(data.frame(rank = 1:200, counts = table(A2[,1])[order(-table(A2[,1]))][use[1:200]]), aes(x = rank, y=counts.Freq)) + geom_bar(stat = 'identity')
#Generates histogram of insertions

Fig1f = ggplot(doubles[rowSums(doubles > 0) == 2,],aes(x=FwdDetections,y=RevDetections)) + geom_point() + scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') + theme_classic()
#Generates forward vs reverse tir plot

powerlaw = ggplot(data.frame(Pval=sapply(rowSums(doubles), function(x) { sum(rowSums(doubles) > x) }),val=rowSums(doubles)), aes(x=val,y=Pval)) + geom_point() + scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') + theme_classic()
#using doubles, creates log log frequency plot that shows power law 

Fig1e
Fig1f
powerlaw
#Runs to create plots





