CleanFn=function(A) {
  A[A[,3] < 0,2] = A[A[,3] < 0,2] + A[A[,3] < 0,7]
  A = A[order(A[,1], A[,2], -A[,6]),-7]
  A = A[(A[,4] %in% c('TATCTC','TGTCTC')) & (A[,6] >= 10),]   
  # Require validation sequence to match TIR and a mapping quality greater than 10



  A = A[,-c(4,6,7)]

  A$ID = apply(gsub(' ', '', as.matrix(A)), 1, paste, collapse = '_')
  A$Reads = table(A$ID)[A$ID]
  A = unique(A[,-5])


A$LigPos = A[,2] + A[,3]
A$Direction = sign(A[,3])
Labs = apply(gsub(' ', '', as.matrix(A[,c(1,4,6:7)])), 1, paste, collapse='_')
A$Lab = Labs
A2 = A[order(A[,4], A[,1], A[,7], A[,6]),]
conflicts = which((abs(diff(A2[,6])) <= 10))
c2 = c(1,which(diff(conflicts)>1)+1, length(conflicts))
dels = NULL
for (i in 1:(length(c2)-1)) {
  z = conflicts[c2[i]]:(conflicts[c2[i+1]-1]+1)
  rd = A2[z,]$Reads
  A2[z[which(rd == max(rd))[1]],5] = sum(rd)
  dels = c(dels, z[-which(rd == max(rd))[1]])
}
A2 = A2[-dels,]
A = A2[order(A2[,1],A2[,2],-A2$Direction),c(1,2,7,4,5)]
A = A[A[,5] > 1,]
Ab = unique(A[,1:3])
Ab = cbind(Ab, abs(c(diff(Ab[,2]),10^6)))
return(Ab)
}



BuildFigs=function(Ab) {
thresh = 20
Ab = Ab[(Ab[,4] <= thresh) | (c(thresh*2, Ab[-nrow(Ab),4]) <= thresh),]
doubles = which(Ab[,4] > thresh)
dists = data.frame(dist = Ab[doubles,2] - Ab[doubles - 1,2], orientation = c('Reverse', 'Same')[1 + (Ab[doubles,3] == Ab[doubles - 1,3])])#[diff(c(0,doubles)) == 2,]
Fig1d = ggplot(dists, aes(x=dist, fill=orientation)) + geom_bar(stat='count')
A2 = A
A2 = data.frame(pos = factor(paste(A2[,1], A2[,2] - 9*(A2[,3] < 0), sep = '_')), orientation = sign(A2[,3]))
doubles = data.frame(fwd = table(A2[A2[,2]==1,1]), rev = table(A2[A2[,2]==-1,1]))
rownames(doubles) = doubles[,1]
doubles = doubles[,c(2,4)]
colnames(doubles) = c('fwd','rev')
use = which(rowSums(doubles[names(table(A2[,1])[order(-table(A2[,1]))]),] > 0) == 2)
Fig1e = ggplot(data.frame(rank = 1:100, counts = table(A2[,1])[order(-table(A2[,1]))][use[1:100]]), aes(x = rank, y=counts.Freq))+xlab('Rank')+ylab('Counts') + geom_bar(stat = 'identity')
Fig1f = ggplot(doubles[rowSums(doubles > 0) == 2,],aes(x=fwd,y=rev)) +xlab('Forward Detections')+ylab('Reverse Detections') + geom_point() + scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') + theme_classic() 
doubles=doubles[rowSums(doubles > 0) == 2,]
powerlaw = ggplot(data.frame(Pval=sapply(rowSums(doubles), function(x) { sum(rowSums(doubles) > x) }),val=rowSums(doubles)), aes(x=val,y=Pval))+xlab('Times an insertion was detected')+ylab('Cumulative Distribution Function') + geom_point() + scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') + theme_classic()
}

MergeFn=function(A) {
#colnames(A)=
A=select(A, genomelocation, UMI)
A1=table(A$genomelocation[order(A[,1])])
A1=as.data.frame(A1)
rownames(A1)=A1[,1]
#colnames(A1)=c("genomelocation","P1724")
UMIcounts = list(L148 = L148counts, L149 = L149counts, L1411=L1411counts, L1712=L1712counts, P1712=P1712counts, L1722=L1722counts, P1722=P1722counts, L1723=L1723counts, P1723=P1723counts, L1724=L1724counts, P1724=P1724counts)
allLocations = unique(unlist(lapply(UMIcounts, rownames)))
UMImerge = matrix(unlist(lapply(UMIcounts, function(x) { x[allLocations, 2] })), ncol = length(UMIcounts))
rownames(UMImerge) = allLocations
colnames(UMImerge) = names(UMIcounts)
UMImerge[is.na(UMImerge)] = 0

ReadCounts = list(NA14.8.LEAF,NA14.9.LEAF,NA14.11.LEAF,NA17.12.LEAF,NA17.12.POLLEN,NA17.22.LEAF, NA17.22.POLLEN,NA17.23.LEAF,NA17.23.POLLEN,NA17.24.LEAF,NA17.24.POLLEN)
CleanReadCounts = lapply(ReadCounts, CleanFn)
MoleculeCounts=lapply(CleanReadCounts, MergeFn)
